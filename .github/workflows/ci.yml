name: Django application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  health-check-job:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Lint with WPS
        run: |
          flake8 . --count --show-source --statistics
      - name: Check type annotations
        run: |
          mypy .
      - name: Run test
        run: |
          python manage.py test

  build-job:
    runs-on: ubuntu-latest
    needs: [health-check-job]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Login to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: sanchos2/upravdom:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

  deploy-job:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build-job]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DATABASE=postgres >> .env
          echo WEB_IMAGE=sanchos2/upravdom:latest >> .env
          echo APP_DIR=${{ secrets.APP_DIR }} >> .env
          echo DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }} >> .env
          echo DOCKER_HUB_ACCESS_TOKEN=${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} >> .env
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on VPS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -P ${{ secrets.VPS_PORT }} -r ./.env ./docker-compose.prod.yaml ${{ secrets.VPS_USER }}@${{ secrets.VPS_NAME }}:${{ secrets.APP_DIR }}
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.VPS_PORT }}  ${{ secrets.VPS_USER }}@${{ secrets.VPS_NAME }} << 'ENDSSH'
            cd $HOME/upravdom
            source .env
            docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_ACCESS_TOKEN
            docker pull $WEB_IMAGE
            docker-compose -f docker-compose.prod.yaml up -d
          ENDSSH
